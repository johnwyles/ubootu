{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(mv:*)",
      "Bash(python3:*)",
      "Bash(ls:*)",
      "Bash(rm:*)",
      "Bash(echo:*)",
      "Bash(tty)",
      "Bash(mkdir:*)",
      "Bash(timeout:*)",
      "Bash(true)",
      "Bash(chmod:*)",
      "Bash(touch:*)",
      "Bash(python -m pytest tests/test_menu_system.py -v)",
      "Bash(./verify_no_empty_lines.sh:*)",
      "Bash(git add:*)",
      "Bash(git config:*)",
      "Bash(cp:*)",
      "Bash(test:*)",
      "Bash(git rm:*)",
      "Bash(git check-ignore:*)",
      "Bash(python tests/test_tui_compilation.py)",
      "Bash(python -m pytest tests/lib/tui/test_colors.py tests/lib/tui/test_dialogs.py tests/lib/tui/test_config.py -v --cov=lib.tui.colors --cov=lib.tui.dialogs --cov=lib.tui.config --cov-report=term-missing)",
      "Bash(pip3 install:*)",
      "Bash(python:*)",
      "Bash(black:*)",
      "Bash(git commit:*)",
      "Bash(gh run list:*)",
      "WebFetch(domain:github.com)",
      "Bash(gh run view:*)",
      "Bash(gh run watch:*)",
      "Bash(git push:*)",
      "Bash(#!/bin/bash\n# Find all Python files with incorrect imports and fix them\nfor file in $(find lib -name \"\"*.py\"\" -type f); do\n    # Check if file has any imports without lib. prefix\n    if grep -E \"\"^from (menu_ui|tui_dialogs|profile_manager|config_validator|terminal_check|ubootu_splash|show_profile_templates|tui_components|menu_dialog|profile_selector|history_viewer|app_customization_templates|backup_config_tui|quick_actions_tui|terminal_customization|help_viewer|tui_splash|section_selector|overlay_dialog|apt_fixer|config_models|error_handling|tui_dialog|keybindings_manager|history_manager|profile_navigator|splash_animations|settings_manager|system_checks|theme_manager|input_validator|state_manager|widgets|dialogs|menus|handlers|colors|app|config|core|models|renderer) \"\" \"\"$file\"\"; then\n        echo \"\"Fixing imports in: $file\"\"\n        # Fix each import pattern\n        sed -i ''s/^from menu_ui import/from lib.menu_ui import/g'' \"\"$file\"\"\n        sed -i ''s/^from tui_dialogs import/from lib.tui_dialogs import/g'' \"\"$file\"\"\n        sed -i ''s/^from profile_manager import/from lib.profile_manager import/g'' \"\"$file\"\"\n        sed -i ''s/^from config_validator import/from lib.config_validator import/g'' \"\"$file\"\"\n        sed -i ''s/^from terminal_check import/from lib.terminal_check import/g'' \"\"$file\"\"\n        sed -i ''s/^from ubootu_splash import/from lib.ubootu_splash import/g'' \"\"$file\"\"\n        sed -i ''s/^from show_profile_templates import/from lib.show_profile_templates import/g'' \"\"$file\"\"\n        sed -i ''s/^from tui_components import/from lib.tui_components import/g'' \"\"$file\"\"\n        sed -i ''s/^from menu_dialog import/from lib.menu_dialog import/g'' \"\"$file\"\"\n        sed -i ''s/^from profile_selector import/from lib.profile_selector import/g'' \"\"$file\"\"\n        sed -i ''s/^from history_viewer import/from lib.history_viewer import/g'' \"\"$file\"\"\n        sed -i ''s/^from app_customization_templates import/from lib.app_customization_templates import/g'' \"\"$file\"\"\n        sed -i ''s/^from backup_config_tui import/from lib.backup_config_tui import/g'' \"\"$file\"\"\n        sed -i ''s/^from quick_actions_tui import/from lib.quick_actions_tui import/g'' \"\"$file\"\"\n        sed -i ''s/^from terminal_customization import/from lib.terminal_customization import/g'' \"\"$file\"\"\n        sed -i ''s/^from help_viewer import/from lib.help_viewer import/g'' \"\"$file\"\"\n        sed -i ''s/^from tui_splash import/from lib.tui_splash import/g'' \"\"$file\"\"\n        sed -i ''s/^from section_selector import/from lib.section_selector import/g'' \"\"$file\"\"\n        sed -i ''s/^from overlay_dialog import/from lib.overlay_dialog import/g'' \"\"$file\"\"\n        sed -i ''s/^from apt_fixer import/from lib.apt_fixer import/g'' \"\"$file\"\"\n        sed -i ''s/^from config_models import/from lib.config_models import/g'' \"\"$file\"\"\n        sed -i ''s/^from error_handling import/from lib.error_handling import/g'' \"\"$file\"\"\n    fi\ndone\n\n# Also check for imports in the lib/tui directory that should use lib.tui prefix\nfor file in $(find lib -name \"\"*.py\"\" -type f); do\n    if grep -E \"\"^from tui\\.(models|renderer|dialogs|handlers|config|core|colors|app|menus) \"\" \"\"$file\"\"; then\n        echo \"\"Fixing tui imports in: $file\"\"\n        sed -i ''s/^from tui\\./from lib.tui./g'' \"\"$file\"\"\n    fi\ndone\n\n# Fix config.example.yml trailing spaces\nif [ -f \"\"config.example.yml\"\" ]; then\n    echo \"\"Fixing trailing spaces in config.example.yml\"\"\n    sed -i ''s/[[:space:]]*$//'' config.example.yml\nfi\n\n# Add document start to config files\nif [ -f \"\"config.yml\"\" ] && ! grep -q \"\"^---\"\" config.yml; then\n    echo \"\"Adding document start to config.yml\"\"\n    sed -i ''1i---'' config.yml\nfi\n\nif [ -f \"\"config.example.yml\"\" ] && ! grep -q \"\"^---\"\" config.example.yml; then\n    echo \"\"Adding document start to config.example.yml\"\"\n    sed -i ''1i---'' config.example.yml\nfi\n\necho \"\"Done fixing all import issues!\"\")",
      "Bash(#!/bin/bash\n# Fix all relative imports in lib/tui files\nfor file in $(find lib/tui -name \"\"*.py\"\"); do\n    echo \"\"Checking $file\"\"\n    # Fix relative imports within tui package\n    sed -i ''s/^from \\.core import/from lib.tui.core import/g'' \"\"$file\"\"\n    sed -i ''s/^from \\.models import/from lib.tui.models import/g'' \"\"$file\"\"\n    sed -i ''s/^from \\.renderer import/from lib.tui.renderer import/g'' \"\"$file\"\"\n    sed -i ''s/^from \\.dialogs import/from lib.tui.dialogs import/g'' \"\"$file\"\"\n    sed -i ''s/^from \\.handlers import/from lib.tui.handlers import/g'' \"\"$file\"\"\n    sed -i ''s/^from \\.config import/from lib.tui.config import/g'' \"\"$file\"\"\n    sed -i ''s/^from \\.colors import/from lib.tui.colors import/g'' \"\"$file\"\"\n    sed -i ''s/^from \\.menu_structure import/from lib.tui.menu_structure import/g'' \"\"$file\"\"\ndone\n\necho \"\"Fixed all relative imports in lib/tui\"\")",
      "Bash(#!/bin/bash\n# Find ALL files with relative imports\necho \"\"=== Finding all relative imports ===\"\"\nfind lib -name \"\"*.py\"\" -exec grep -l \"\"^from \\.\"\" {} \\; | while read file; do\n    echo \"\"Fixing relative imports in: $file\"\"\n    # Get the directory of the file relative to lib\n    dir=$(dirname \"\"$file\"\" | sed ''s|^lib/||'')\n    \n    # Fix all relative imports\n    grep \"\"^from \\.\"\" \"\"$file\"\" | while read import_line; do\n        # Extract what''s being imported\n        import_part=$(echo \"\"$import_line\"\" | sed ''s/^from \\.//'')\n        module=$(echo \"\"$import_part\"\" | cut -d'' '' -f1)\n        \n        # Build the correct absolute import\n        if [[ \"\"$dir\"\" == \"\".\"\" ]]; then\n            new_import=\"\"from lib.$module\"\"\n        else\n            new_import=\"\"from lib.$dir.$module\"\"\n        fi\n        \n        old_import=\"\"from .$module\"\"\n        echo \"\"  Replacing: $old_import -> $new_import\"\"\n        sed -i \"\"s|$old_import|$new_import|g\"\" \"\"$file\"\"\n    done\ndone\n\necho \"\"Done fixing all relative imports!\"\")",
      "Bash(#!/bin/bash\n# Fix the broken imports\nfor file in lib/tui/menus/*.py; do\n    echo \"\"Fixing $file\"\"\n    sed -i ''s|from lib.tui/menus.base|from lib.tui.menus.base|g'' \"\"$file\"\"\n    sed -i ''s|from lib.tui/menus.development|from lib.tui.menus.development|g'' \"\"$file\"\"\n    sed -i ''s|from lib.tui/menus.desktop|from lib.tui.menus.desktop|g'' \"\"$file\"\"\n    sed -i ''s|from lib.tui/menus.applications|from lib.tui.menus.applications|g'' \"\"$file\"\"\n    sed -i ''s|from lib.tui/menus.security|from lib.tui.menus.security|g'' \"\"$file\"\"\n    sed -i ''s|from lib.tui/menus.system|from lib.tui.menus.system|g'' \"\"$file\"\"\ndone\n\necho \"\"Fixed imports!\"\")",
      "Bash(#!/bin/bash\n# Fix all menu files properly\nfor file in lib/tui/menus/*.py; do\n    if [ -f \"\"$file\"\" ]; then\n        echo \"\"Fixing $file\"\"\n        # Fix the broken import syntax\n        sed -i ''s|from lib\\.tui/menus\\.|from lib.tui.menus.|g'' \"\"$file\"\"\n    fi\ndone\n\necho \"\"All menu imports fixed!\"\")",
      "Bash(find tests/lib/tui -name \"test_*.py\" -type f)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(sed:*)",
      "Bash(pip freeze)",
      "Bash(curl:*)",
      "Bash(yamllint:*)",
      "Bash(pytest:*)",
      "Bash(git checkout:*)",
      "Bash(gh pr checks:*)",
      "Bash(TERM=dumb pytest tests/ -x --tb=short)",
      "Bash(awk:*)",
      "Bash(flake8:*)",
      "Bash(isort:*)",
      "Bash(ansible-galaxy install:*)",
      "Bash(./run_all_checks.sh:*)",
      "Bash(git reset:*)",
      "Bash(git stash:*)",
      "Bash(git pull:*)",
      "Bash(cat:*)",
      "Bash(ansible-lint:*)",
      "Bash(for:*)",
      "Bash(do echo:*)",
      "Bash(gh run delete:*)",
      "Bash(done)",
      "Bash(do gh run delete $run_id)",
      "Bash(git log:*)",
      "Bash(git restore:*)",
      "Bash(gh workflow run:*)",
      "Bash(gh api:*)",
      "Bash(do)",
      "Bash(molecule:*)",
      "Bash(./test_modify_setup.sh:*)",
      "Bash(bash:*)",
      "Bash(.venv/bin/pytest tests/lib/tui/ -v)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/ -v)",
      "Bash(./setup.sh:*)",
      "Bash(./test_setup_debug.sh:*)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py -v)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_all_main_categories_exist -v)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_desktop_environments_complete -v --tb=short)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_global_theme_system_exists -v --tb=short)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_font_management_complete -v --tb=short)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_configuration_types_exist -v --tb=short)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_development_tools_complete -v --tb=short)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_system_settings_complete -v --tb=short)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_minimum_item_count -v --tb=short)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py -v --tb=no -q)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py -xvs)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_minimum_item_count -xvs)",
      "Bash(.venv/bin/python -m pytest tests/lib/tui/test_menu_structure_complete.py::TestCompleteMenuStructure::test_ansible_var_mappings -xvs)",
      "Bash(ansible:*)",
      "Bash(sudo apt update:*)",
      "Bash(sudo:*)",
      "Bash(.venv/bin/python:*)",
      "Bash(apt list:*)",
      "Bash(journalctl:*)",
      "Bash(command -v:*)",
      "Bash(systemd-analyze:*)",
      "Bash(tree:*)",
      "Bash(env)",
      "Bash(/home/jwyles/fix_shell_issues.sh:*)",
      "Bash(/home/jwyles/terminal_fix.sh:*)",
      "Bash(export PATH=\"$HOME/.local/bin:$PATH\")",
      "Bash(crontab:*)",
      "Bash(set)",
      "Bash(/home/jwyles/test_shell_startup.sh)",
      "Bash(/home/jwyles/trace_startup.sh:*)",
      "Bash(gsettings:*)",
      "Bash(/home/jwyles/debug_login_shell.sh:*)",
      "Bash(/home/jwyles/test_shell_fixes.sh:*)",
      "Bash(DEBUG_SHELL_SOURCE=1 bash -c 'echo \"\"\"\"Test shell\"\"\"\"')",
      "Bash(strace:*)",
      "Bash(./test_shell_error_handling.sh:*)",
      "Bash(dmesg:*)",
      "Bash(coverage report:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(./configure_standard_tui.py)",
      "Bash(sha256sum:*)",
      "Bash(.venv/bin/pytest tests/test_integration.py -v --tb=short)",
      "Bash(.venv/bin/pytest tests/test_integration.py::TestIntegration::test_menu_builders_integration tests/test_integration.py::TestIntegration::test_menu_dialog -xvs)",
      "Bash(.venv/bin/pytest tests/test_integration.py -x --tb=line)",
      "Bash(if [ -f .ubootu_applied.yml ])",
      "Bash(then sed -i '1s/^/---\\n/' .ubootu_applied.yml)",
      "Bash(fi)",
      "Bash(.venv/bin/yamllint --format parsable .)",
      "Bash(.venv/bin/pytest tests/ -x --tb=no -q)",
      "Bash(.venv/bin/pytest tests/lib/test_tui_components.py -v)",
      "Bash(.venv/bin/pytest tests/test_integration.py tests/lib/tui/ tests/test_imports.py -q --tb=no)",
      "Bash(.venv/bin/yamllint --version)",
      "Bash(.venv/bin/yamllint roles/boot-diagnostics/tasks/boot-optimization.yml)",
      "Bash(.venv/bin/black:*)",
      "Bash(.venv/bin/isort:*)",
      "Bash(.venv/bin/yamllint:*)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/test_full_run.py::TestFullAnsibleRun::test_ansible_syntax_check -xvs)",
      "Bash(.venv/bin/pytest tests/ --no-cov -x -q)",
      "Bash(.venv/bin/pytest tests/ --cov=lib --cov=configure_standard_tui --cov-report=term --no-cov-on-fail -q)",
      "Bash(.venv/bin/pytest tests/ -v --tb=short)",
      "Bash(.venv/bin/pytest tests/test_*_functional.py -v --tb=no --cov=lib --cov-report=term-missing:skip-covered --cov-fail-under=29 -q)",
      "Bash(.venv/bin/pytest tests/test_*_functional.py --cov=lib --cov-report=term:skip-covered)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py -v --tb=short)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py::TestMenuItemsFunctional::test_menu_items_have_required_fields -xvs)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py -v --tb=no)",
      "Bash(.venv/bin/pytest tests/test_menu_dialog_functional.py::TestMenuDialog -xvs --tb=line)",
      "Bash(.venv/bin/pytest tests/test_menu_dialog_functional.py::TestMenuDialog::test_draw_box -xvs)",
      "Bash(.venv/bin/pytest tests/test_menu_dialog_functional.py -v --tb=no)",
      "Bash(.venv/bin/pytest tests/test_menu_dialog_functional.py -v --tb=no -q)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py tests/test_app_defaults_functional.py --cov=lib --cov-report=term --no-cov-on-fail -q)",
      "Bash(jq:*)",
      "Bash(.venv/bin/pytest tests/test_imports.py -v --tb=short)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py tests/test_app_defaults_functional.py --tb=no -q)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py tests/test_app_defaults_functional.py tests/test_menu_dialog_functional.py --tb=no -q)",
      "Bash(.venv/bin/pytest tests/test_menu_dialog_functional.py::TestMenuDialog::test_show_menu_empty_items -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py tests/test_app_defaults_functional.py tests/test_menu_dialog_functional.py tests/test_system_discovery_functional.py tests/test_unified_menu_functional.py --tb=no -q)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py tests/test_app_defaults_functional.py tests/test_menu_dialog_functional.py --cov=lib --cov-report=term --no-cov-on-fail -q)",
      "Bash(.venv/bin/pytest tests/test_*_functional.py --cov=lib --cov-report=term --no-cov-on-fail -q --tb=no)",
      "Bash(.venv/bin/pytest tests/test_terminal_check_functional.py --tb=short)",
      "Bash(.venv/bin/pytest tests/test_terminal_check_functional.py -v --tb=no)",
      "Bash(.venv/bin/pytest tests/test_sudo_dialog_functional.py -v --tb=no -q)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py tests/test_app_defaults_functional.py tests/test_menu_dialog_functional.py tests/test_terminal_check_functional.py tests/test_sudo_dialog_functional.py tests/test_imports.py --cov=lib --cov-report=term --no-cov-on-fail -q)",
      "Bash(.venv/bin/pytest tests/test_menu_items_functional.py tests/test_app_defaults_functional.py tests/test_menu_dialog_functional.py tests/test_imports.py --cov=lib --cov-report=term:skip-covered -q)",
      "Bash(.venv/bin/pytest tests/test_progress_dialog_functional.py -v --tb=short)",
      "Bash(.venv/bin/pytest tests/test_menu_dialog_functional.py tests/test_terminal_check_functional.py tests/test_sudo_dialog_functional.py -v --tb=no -q)",
      "Bash(.venv/bin/pytest tests/ --tb=no -q)",
      "Bash(.venv/bin/pytest tests/test_imports.py tests/test_menu_dialog_functional.py tests/test_app_defaults_functional.py tests/test_unified_menu_functional.py tests/test_system_discovery_functional.py -q --tb=no)",
      "Bash(.venv/bin/pytest tests/lib/test_terminal_check.py::TestTestCursesBasic::test_success_interactive -xvs)",
      "Bash(.venv/bin/pytest tests/lib/test_terminal_check.py -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/test_full_run.py::TestFullAnsibleRun::test_individual_roles -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/test_full_run.py::TestFullAnsibleRun::test_individual_roles -k applications -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/test_full_run.py::TestFullAnsibleRun::test_repository_handling -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/test_full_run.py::TestFullAnsibleRun::test_repository_handling -xvs --tb=no)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/test_full_run.py::TestFullAnsibleRun::test_repository_handling -xvs)",
      "Bash(.venv/bin/pytest tests/ -x --tb=no -q --no-cov)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/test_full_run.py::TestErrorMessages::test_no_undefined_variable_errors -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/test_packages.py::TestDownloadURLs::test_github_release_urls -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/ --tb=no -q --no-cov)",
      "Bash(.venv/bin/pytest tests/ansible_fixes/ tests/lib/tui/test_menu_structure_complete.py tests/test_imports.py --tb=no -q --no-cov)",
      "Bash(.venv/bin/pytest tests/ -vv --tb=long --cov --cov-report=xml --cov-report=term-missing)",
      "Bash(.venv/bin/pytest tests/ -vv --tb=short --cov --cov-report=xml --cov-report=term-missing)",
      "Bash(.venv/bin/pytest tests/ -x --tb=no --cov-fail-under=29)",
      "Bash(.venv/bin/pytest tests/ --cov --cov-report=xml --cov-report=term-missing --cov-fail-under=29 -x)",
      "Bash(.venv/bin/pytest tests/ --cov --cov-report=xml --cov-report=term-missing --cov-fail-under=29 -q)",
      "Bash(.venv/bin/pytest tests/ --co -q)",
      "Bash(.venv/bin/pytest tests/ --cov=lib --cov=configure_standard_tui --cov-report=term --no-cov-on-fail -q --tb=no)",
      "Bash(.venv/bin/pytest tests/ --cov=lib --cov-report=term-missing --tb=no -q)",
      "Bash(.venv/bin/pytest tests/ -x --tb=no --no-cov -q --timeout=30)",
      "Bash(.venv/bin/pytest tests/test_imports.py -v --tb=short --timeout=10)",
      "Bash(.venv/bin/pytest tests/test_imports.py -q --no-cov --timeout=10)",
      "Bash(.venv/bin/pytest tests/lib/tui/test_constants.py -v --no-cov)",
      "Bash(.venv/bin/pytest tests/lib/tui/test_utils.py -v --no-cov)",
      "Bash(.venv/bin/pytest tests/lib/tui/test_sudo_dialog.py -v --no-cov)",
      "Bash(.venv/bin/pytest tests/lib/tui/test_constants.py tests/lib/tui/test_utils.py tests/lib/tui/test_sudo_dialog.py --cov=lib.tui.constants --cov=lib.tui.utils --cov=lib.tui.sudo_dialog --cov-report=term --no-cov-on-fail -q)",
      "Bash(git fetch:*)"
    ],
    "deny": []
  }
}