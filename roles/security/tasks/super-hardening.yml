---
# Super tight security hardening

# Kernel hardening - additional parameters
- name: Apply aggressive kernel security parameters
  ansible.builtin.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/99-super-hardening.conf
    reload: yes
  become: yes
  loop:
    # Kernel security
    - { key: 'kernel.kptr_restrict', value: '{{ super_hardening_kernel.kptr_restrict }}' }
    - { key: 'kernel.dmesg_restrict', value: '{{ super_hardening_kernel.dmesg_restrict }}' }
    - { key: 'kernel.printk', value: '3 3 3 3' }
    - { key: 'kernel.unprivileged_bpf_disabled', value: '{{ super_hardening_kernel.unprivileged_bpf_disabled }}' }
    - { key: 'net.core.bpf_jit_harden', value: '2' }
    - { key: 'dev.tty.ldisc_autoload', value: '0' }
    - { key: 'vm.unprivileged_userfaultfd', value: '{{ super_hardening_kernel.unprivileged_userfaultfd }}' }
    - { key: 'kernel.kexec_load_disabled', value: '{{ super_hardening_kernel.kexec_load_disabled }}' }
    - { key: 'kernel.sysrq', value: '{{ super_hardening_kernel.sysrq }}' }
    - { key: 'kernel.unprivileged_userns_clone', value: '{{ super_hardening_kernel.unprivileged_userns_clone }}' }
    - { key: 'kernel.perf_event_paranoid', value: '{{ super_hardening_kernel.perf_event_paranoid }}' }
    - { key: 'kernel.core_uses_pid', value: '{{ super_hardening_kernel.core_uses_pid }}' }
    - { key: 'kernel.numa_balancing', value: '0' }
    - { key: 'kernel.randomize_va_space', value: '{{ super_hardening_kernel.randomize_va_space }}' }
    - { key: 'fs.suid_dumpable', value: '0' }
    - { key: 'fs.protected_hardlinks', value: '1' }
    - { key: 'fs.protected_symlinks', value: '1' }
    - { key: 'fs.protected_fifos', value: '2' }
    - { key: 'fs.protected_regular', value: '2' }
    - { key: 'kernel.yama.ptrace_scope', value: '{{ super_hardening_kernel.yama_ptrace_scope }}' }
    - { key: 'user.max_user_namespaces', value: '{{ super_hardening_kernel.user_max_namespaces }}' }
    - { key: 'kernel.modules_disabled', value: '{{ super_hardening_kernel.kernel_modules_disabled }}' }
    # Network hardening
    - { key: 'net.ipv4.tcp_rfc1337', value: '{{ super_hardening_network.tcp_rfc1337 }}' }
    - { key: 'net.ipv4.tcp_timestamps', value: '{{ super_hardening_network.tcp_timestamps }}' }
    - { key: 'net.ipv4.tcp_syn_retries', value: '2' }
    - { key: 'net.ipv4.tcp_synack_retries', value: '2' }
    - { key: 'net.ipv4.tcp_max_syn_backlog', value: '4096' }
    - { key: 'net.ipv4.tcp_syncookies', value: '{{ super_hardening_network.tcp_syncookies }}' }
    - { key: 'net.ipv4.tcp_keepalive_time', value: '300' }
    - { key: 'net.ipv4.tcp_keepalive_probes', value: '5' }
    - { key: 'net.ipv4.tcp_keepalive_intvl', value: '15' }
    - { key: 'net.ipv4.conf.all.log_martians', value: '{{ super_hardening_network.log_martians }}' }
    - { key: 'net.ipv4.conf.default.log_martians', value: '{{ super_hardening_network.log_martians }}' }
    - { key: 'net.ipv4.conf.all.send_redirects', value: '{{ super_hardening_network.send_redirects }}' }
    - { key: 'net.ipv4.conf.default.send_redirects', value: '{{ super_hardening_network.send_redirects }}' }
    - { key: 'net.ipv4.icmp_echo_ignore_all', value: '{{ super_hardening_network.icmp_echo_ignore_all }}' }
    - { key: 'net.ipv4.icmp_ignore_bogus_error_responses', value: '1' }
    - { key: 'net.ipv4.conf.all.accept_source_route', value: '{{ super_hardening_network.accept_source_route }}' }
    - { key: 'net.ipv4.conf.default.accept_source_route', value: '0' }
    - { key: 'net.ipv6.conf.all.accept_source_route', value: '0' }
    - { key: 'net.ipv6.conf.default.accept_source_route', value: '0' }
    - { key: 'net.ipv4.conf.all.arp_ignore', value: '1' }
    - { key: 'net.ipv4.conf.all.arp_announce', value: '2' }
    - { key: 'net.ipv4.conf.all.shared_media', value: '0' }
    - { key: 'net.ipv4.conf.default.shared_media', value: '0' }
    - { key: 'net.ipv4.route.flush', value: '1' }
    - { key: 'net.ipv6.route.flush', value: '1' }

# Disable IPv6 if not needed
- name: Disable IPv6
  ansible.builtin.sysctl:
    name: "{{ item }}"
    value: '1'
    state: present
    sysctl_file: /etc/sysctl.d/99-disable-ipv6.conf
    reload: yes
  become: yes
  loop:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6
  when: disable_ipv6 | default(false)

# Secure boot configuration
- name: Set GRUB password
  block:
    - name: Generate GRUB password hash
      ansible.builtin.shell: |
        echo -e "{{ vault_grub_password | default('changeme123') }}\n{{ vault_grub_password | default('changeme123') }}" | grub-mkpasswd-pbkdf2 | grep -oP '(?<=is ).*'
      register: grub_password_hash
      changed_when: false
      no_log: true

    - name: Create GRUB custom configuration
      ansible.builtin.copy:
        dest: /etc/grub.d/40_custom_security
        content: |
          #!/bin/sh
          set -e

          cat <<EOF
          set superusers="root"
          password_pbkdf2 root {{ grub_password_hash.stdout }}
          EOF
        mode: '0755'
      become: yes

    - name: Update GRUB configuration
      ansible.builtin.command: update-grub
      become: yes
  when: enable_grub_password | default(true)

# Restrict kernel module loading
- name: Disable kernel module loading
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-disable-modules.conf
    content: |
      # Disable kernel module loading after boot
      kernel.modules_disabled = 1
    mode: '0644'
  become: yes
  when: super_hardening_kernel.kernel_modules_disabled == 1
  notify: reload sysctl

# Configure secure mount options
- name: Set secure mount options for /tmp
  ansible.builtin.mount:
    name: /tmp
    src: tmpfs
    fstype: tmpfs
    opts: "{{ secure_mount_options.tmp.options }},mode=1777,size=2G"
    state: mounted
  become: yes
  notify: remount tmp

- name: Set secure mount options for /var/tmp
  ansible.builtin.mount:
    name: /var/tmp
    src: tmpfs
    fstype: tmpfs
    opts: "{{ secure_mount_options.var_tmp.options }},mode=1777,size=2G"
    state: mounted
  become: yes
  notify: remount var_tmp

- name: Set secure mount options for /dev/shm
  ansible.builtin.mount:
    name: /dev/shm
    src: tmpfs
    fstype: tmpfs
    opts: "{{ secure_mount_options.dev_shm.options }}"
    state: mounted
  become: yes
  notify: remount dev_shm

# Harden user environment
- name: Set restrictive umask in shell configs
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    line: 'umask 077'
    create: yes
  become: yes
  loop:
    - /etc/bash.bashrc
    - /etc/profile
    - /etc/zsh/zshrc

- name: Disable core dumps
  block:
    - name: Set core dump limits
      pam_limits:
        domain: '*'
        limit_type: "{{ item }}"
        limit_item: core
        value: '0'
      become: yes
      loop:
        - hard
        - soft

    - name: Disable core dumps in sysctl
      ansible.builtin.sysctl:
        name: kernel.core_pattern
        value: '|/bin/false'
        state: present
        sysctl_file: /etc/sysctl.d/99-disable-coredumps.conf
      become: yes

    - name: Disable systemd core dumps
      ansible.builtin.lineinfile:
        path: /etc/systemd/coredump.conf
        regexp: '^#?Storage='
        line: 'Storage=none'
      become: yes

# Remove unnecessary packages
- name: Remove unnecessary packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: absent
    purge: yes
  become: yes
  loop: "{{ packages_to_remove }}"
  failed_when: false

# Harden systemd services
- name: Harden systemd services
  ansible.builtin.copy:
    dest: /etc/systemd/system/{{ item }}.d/hardening.conf
    content: |
      [Service]
      NoNewPrivileges=true
      PrivateTmp=true
      ProtectSystem=strict
      ProtectHome=true
      ProtectKernelTunables=true
      ProtectKernelModules=true
      ProtectControlGroups=true
      RestrictRealtime=true
      RestrictSUIDSGID=true
      LockPersonality=true
      MemoryDenyWriteExecute=true
      RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6
      SystemCallFilter=@system-service
      SystemCallErrorNumber=EPERM
    mode: '0644'
  become: yes
  loop:
    - nginx
    - apache2
    - mysql
    - postgresql
  failed_when: false
  notify: reload systemd

# Configure auditd rules
- name: Configure comprehensive audit rules
  ansible.builtin.template:
    src: audit.rules.j2
    dest: /etc/audit/rules.d/hardening.rules
    mode: '0640'
  become: yes
  notify: restart auditd


# PAM hardening
- name: Configure PAM password requirements
  ansible.builtin.template:
    src: pam-password.j2
    dest: /etc/pam.d/common-password
    mode: '0644'
    backup: yes
  become: yes
  notify: reload pam

- name: Configure PAM authentication with faillock
  ansible.builtin.template:
    src: pam-auth.j2
    dest: /etc/pam.d/common-auth
    mode: '0644'
    backup: yes
  become: yes
  notify: reload pam

# Configure login.defs for strong security
- name: Configure strong login.defs
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  become: yes
  loop:
    - { regexp: '^PASS_MAX_DAYS', line: 'PASS_MAX_DAYS   60' }
    - { regexp: '^PASS_MIN_DAYS', line: 'PASS_MIN_DAYS   1' }
    - { regexp: '^PASS_MIN_LEN', line: 'PASS_MIN_LEN    14' }
    - { regexp: '^PASS_WARN_AGE', line: 'PASS_WARN_AGE   7' }
    - { regexp: '^LOGIN_RETRIES', line: 'LOGIN_RETRIES   3' }
    - { regexp: '^LOGIN_TIMEOUT', line: 'LOGIN_TIMEOUT   60' }
    - { regexp: '^ENCRYPT_METHOD', line: 'ENCRYPT_METHOD  YESCRYPT' }
    - { regexp: '^YESCRYPT_COST_FACTOR', line: 'YESCRYPT_COST_FACTOR  11' }
    - { regexp: '^UMASK', line: 'UMASK           077' }
    - { regexp: '^USERGROUPS_ENAB', line: 'USERGROUPS_ENAB no' }

# Restrict su command
- name: Restrict su to wheel group
  block:
    - name: Create wheel group
      group:
        name: wheel
        state: present
      become: yes

    - name: Configure PAM for su restriction
      ansible.builtin.lineinfile:
        path: /etc/pam.d/su
        line: 'auth required pam_wheel.so use_uid'
        insertafter: '^#.*pam_wheel\.so'
      become: yes

# Remove unnecessary network protocols
- name: Blacklist unnecessary network protocols
  ansible.builtin.copy:
    dest: /etc/modprobe.d/blacklist-rare-network.conf
    content: |
      # Blacklist rare network protocols
      blacklist dccp
      blacklist sctp
      blacklist rds
      blacklist tipc
      blacklist n-hdlc
      blacklist ax25
      blacklist netrom
      blacklist x25
      blacklist rose
      blacklist decnet
      blacklist econet
      blacklist af_802154
      blacklist ipx
      blacklist appletalk
      blacklist psnap
      blacklist p8023
      blacklist p8022
      blacklist can
      blacklist atm
    mode: '0644'
  become: yes

# Configure process accounting
- name: Enable process accounting
  block:
    - name: Install process accounting
      ansible.builtin.apt:
        name: acct
        state: present
      become: yes

    - name: Enable process accounting service
      ansible.builtin.systemd:
        name: acct
        enabled: yes
        state: started
      become: yes
  when: enable_process_accounting | default(true)
  notify: restart acct

# Set file permissions on sensitive files
- name: Set restrictive permissions on sensitive files
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode }}"
  become: yes
  loop:
    - { path: '/etc/passwd', mode: '0644' }
    - { path: '/etc/passwd-', mode: '0600' }
    - { path: '/etc/shadow', mode: '0640', group: 'shadow' }
    - { path: '/etc/shadow-', mode: '0640', group: 'shadow' }
    - { path: '/etc/group', mode: '0644' }
    - { path: '/etc/group-', mode: '0600' }
    - { path: '/etc/gshadow', mode: '0640', group: 'shadow' }
    - { path: '/etc/gshadow-', mode: '0640', group: 'shadow' }
    - { path: '/etc/ssh/sshd_config', mode: '0600' }
    - { path: '/etc/sudoers', mode: '0440' }
    - { path: '/boot/grub/grub.cfg', mode: '0600' }
    - { path: '/etc/hosts.allow', mode: '0644' }
    - { path: '/etc/hosts.deny', mode: '0644' }
    - { path: '/etc/crontab', mode: '0600' }
    - { path: '/etc/cron.hourly', mode: '0700' }
    - { path: '/etc/cron.daily', mode: '0700' }
    - { path: '/etc/cron.weekly', mode: '0700' }
    - { path: '/etc/cron.monthly', mode: '0700' }
    - { path: '/etc/cron.d', mode: '0700' }
    - { path: '/etc/at.allow', mode: '0600' }
    - { path: '/etc/at.deny', mode: '0600' }
  failed_when: false

# Configure secure DNS
- name: Configure secure DNS
  ansible.builtin.copy:
    dest: /etc/systemd/resolved.conf
    content: |
      [Resolve]
      DNS={{ secure_dns_servers | join(' ') }}
      FallbackDNS=8.8.8.8 8.8.4.4 2001:4860:4860::8888 2001:4860:4860::8844
      Domains=~.
      DNSSEC=yes
      DNSOverTLS=yes
      Cache=yes
      DNSStubListener=yes
    mode: '0644'
  become: yes
  notify: restart systemd-resolved

# Install and configure USBGuard
- name: Install and configure USBGuard
  block:
    - name: Install USBGuard
      ansible.builtin.apt:
        name:
          - usbguard
          - usbguard-applet-qt
        state: present
      become: yes

    - name: Configure USBGuard rules
      ansible.builtin.template:
        src: usbguard-rules.conf.j2
        dest: /etc/usbguard/rules.conf
        mode: '0600'
        owner: root
        group: root
      become: yes
      notify: restart usbguard

    - name: Start USBGuard service
      ansible.builtin.systemd:
        name: usbguard
        enabled: yes
        state: started
      become: yes
  when: enable_usbguard | default(true)

# Configure spectre/meltdown mitigations
- name: Enable CPU vulnerability mitigations
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash mitigations={{ cpu_mitigations }} slab_nomerge init_on_alloc=1 init_on_free=1 page_alloc.shuffle=1 vsyscall=none debugfs=off"'
    backup: yes
  become: yes
  notify: update grub

# Configure secure time synchronization
- name: Configure secure NTP
  block:
    - name: Install chrony
      ansible.builtin.apt:
        name: chrony
        state: present
      become: yes

    - name: Configure chrony for security
      ansible.builtin.copy:
        dest: /etc/chrony/chrony.conf
        content: |
          # Use secure NTP pools
          pool time.cloudflare.com iburst nts
          pool time.google.com iburst
          pool pool.ntp.org iburst

          # Security options
          rtcsync
          makestep 0.1 3
          bindcmdaddress 127.0.0.1
          bindcmdaddress ::1
          keyfile /etc/chrony/chrony.keys
          driftfile /var/lib/chrony/chrony.drift
          logdir /var/log/chrony
          maxupdateskew 100.0
          hwclockfile /etc/adjtime

          # Restrict access
          local stratum 10
          allow 127.0.0.1
          deny all
        mode: '0644'
      become: yes
      notify: restart chrony
  when: enable_secure_time | default(true)

# Install and configure AIDE++ (Advanced Intrusion Detection)
- name: Configure AIDE++
  block:
    - name: Install AIDE
      ansible.builtin.apt:
        name: aide
        state: present
      become: yes

    - name: Configure AIDE
      ansible.builtin.copy:
        dest: /etc/aide/aide.conf.d/99_super_hardening
        content: |
          # Critical system binaries
          /bin/    f+p+i+n+u+g+s+b+m+c+md5+sha256+sha512+rmd160+tiger+crc32+haval+whirlpool
          /sbin/   f+p+i+n+u+g+s+b+m+c+md5+sha256+sha512+rmd160+tiger+crc32+haval+whirlpool
          /usr/bin/    f+p+i+n+u+g+s+b+m+c+md5+sha256+sha512+rmd160+tiger+crc32+haval+whirlpool
          /usr/sbin/   f+p+i+n+u+g+s+b+m+c+md5+sha256+sha512+rmd160+tiger+crc32+haval+whirlpool

          # Configuration files
          /etc/    f+p+i+n+u+g+s+b+m+c+md5+sha256+sha512

          # System libraries
          /lib/    f+p+i+n+u+g+s+b+m+c+md5+sha256+sha512
          /lib64/  f+p+i+n+u+g+s+b+m+c+md5+sha256+sha512

          # Kernel and modules
          /boot/   f+p+i+n+u+g+s+b+m+c+md5+sha256+sha512

          # Exclude frequently changing files
          !/var/log/
          !/var/cache/
          !/var/tmp/
          !/tmp/
        mode: '0644'
      become: yes

    - name: Initialize AIDE database
      ansible.builtin.command: aideinit
      args:
        creates: /var/lib/aide/aide.db
      become: yes

    - name: Create AIDE check cron job
      ansible.builtin.cron:
        name: "AIDE integrity check"
        minute: "0"
        hour: "5"
        job: "/usr/bin/aide --check | /usr/bin/mail -s 'AIDE Report' root"
        user: root
      become: yes
  when: enable_super_aide | default(true)

# Configure mandatory access control with AppArmor
- name: Harden AppArmor profiles
  block:
    - name: Install AppArmor utilities
      ansible.builtin.apt:
        name:
          - apparmor
          - apparmor-utils
          - apparmor-profiles
          - apparmor-profiles-extra
        state: present
      become: yes

    - name: Enable all AppArmor profiles
      ansible.builtin.shell: |
        aa-enforce /etc/apparmor.d/*
      become: yes
      register: apparmor_result
      failed_when: false
      changed_when: "'Setting' in apparmor_result.stdout"
  when: enable_apparmor | default(true)

# Configure grsecurity-compatible sysctl settings
- name: Apply grsecurity-style kernel hardening
  ansible.builtin.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/99-grsecurity-compat.conf
    reload: yes
  become: yes
  loop:
    # Memory protection
    - { key: 'vm.mmap_min_addr', value: '65536' }
    - { key: 'vm.mmap_rnd_bits', value: '32' }
    - { key: 'vm.mmap_rnd_compat_bits', value: '16' }
    # Stack protection
    - { key: 'kernel.randomize_va_space', value: '2' }
    - { key: 'kernel.exec-shield', value: '1' }
    # Additional protections
    - { key: 'net.ipv4.tcp_challenge_ack_limit', value: '1000' }
    - { key: 'fs.protected_hardlinks', value: '1' }
    - { key: 'fs.protected_symlinks', value: '1' }
  failed_when: false

# Implement file integrity monitoring with inotify
- name: Setup advanced file integrity monitoring
  block:
    - name: Install inotify tools
      ansible.builtin.apt:
        name: inotify-tools
        state: present
      become: yes

    - name: Create file integrity monitoring script
      ansible.builtin.copy:
        dest: /usr/local/bin/file-integrity-monitor.sh
        content: |
          #!/bin/bash
          # File integrity monitoring script

          WATCH_DIRS="/etc /bin /sbin /usr/bin /usr/sbin /lib /lib64 /boot"
          LOG_FILE="/var/log/file-integrity.log"

          inotifywait -mr --timefmt '%Y-%m-%d %H:%M:%S' --format '%T %w %f %e' \
            -e modify -e create -e delete -e move -e attrib \
            $WATCH_DIRS >> "$LOG_FILE" 2>&1 &

          echo $! > /var/run/file-integrity-monitor.pid
        mode: '0755'
      become: yes

    - name: Create systemd service for file integrity monitoring
      ansible.builtin.copy:
        dest: /etc/systemd/system/file-integrity-monitor.service
        content: |
          [Unit]
          Description=File Integrity Monitoring Service
          After=multi-user.target

          [Service]
          Type=forking
          ExecStart=/usr/local/bin/file-integrity-monitor.sh
          PIDFile=/var/run/file-integrity-monitor.pid
          Restart=on-failure
          RestartSec=30

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      become: yes

    - name: Enable file integrity monitoring service
      ansible.builtin.systemd:
        name: file-integrity-monitor
        enabled: yes
        state: started
        daemon_reload: yes
      become: yes
  when: enable_file_integrity_monitoring | default(true)

# Configure secure memory handling
- name: Configure secure memory
  block:
    - name: Disable memory overcommit
      ansible.builtin.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        sysctl_file: /etc/sysctl.d/99-memory-security.conf
      become: yes
      loop:
        - { key: 'vm.overcommit_memory', value: '2' }
        - { key: 'vm.overcommit_ratio', value: '50' }
        - { key: 'vm.admin_reserve_kbytes', value: '131072' }
        - { key: 'vm.panic_on_oom', value: '0' }
        - { key: 'vm.oom_kill_allocating_task', value: '1' }

# Install and configure OSSEC HIDS
- name: Install OSSEC HIDS
  block:
    - name: Download OSSEC
      ansible.builtin.get_url:
        url: https://github.com/ossec/ossec-hids/archive/3.7.0.tar.gz
        dest: /tmp/ossec.tar.gz
        mode: '0644'
      become: yes

    - name: Extract OSSEC
      ansible.builtin.unarchive:
        src: /tmp/ossec.tar.gz
        dest: /tmp/
        remote_src: yes
      become: yes

    - name: Install OSSEC dependencies
      ansible.builtin.apt:
        name:
          - build-essential
          - libssl-dev
          - libpcre2-dev
          - zlib1g-dev
          - libsystemd-dev
        state: present
      become: yes

    - name: Configure OSSEC installation
      ansible.builtin.copy:
        dest: /tmp/ossec-hids-3.7.0/etc/preloaded-vars.conf
        content: |
          USER_LANGUAGE="en"
          USER_NO_STOP="y"
          USER_INSTALL_TYPE="local"
          USER_DIR="/var/ossec"
          USER_ENABLE_ACTIVE_RESPONSE="y"
          USER_ENABLE_SYSCHECK="y"
          USER_ENABLE_ROOTCHECK="y"
          USER_ENABLE_OPENSCAP="y"
          USER_ENABLE_SYSLOG="y"
          USER_ENABLE_AUTHD="y"
          USER_GENERATE_AUTHD_CERT="y"
          USER_AUTO_START="y"
        mode: '0644'
      become: yes

    - name: Install OSSEC
      ansible.builtin.shell: |
        cd /tmp/ossec-hids-3.7.0 && ./install.sh
      args:
        creates: /var/ossec/bin/ossec-control
      become: yes
  when: enable_ossec | default(false)

# Configure secure logging
- name: Configure secure system logging
  block:
    - name: Configure rsyslog for security
      ansible.builtin.copy:
        dest: /etc/rsyslog.d/99-security.conf
        content: |
          # Log authentication messages
          auth,authpriv.*                 /var/log/auth.log

          # Log all kernel messages
          kern.*                          /var/log/kern.log

          # Log security events
          *.=warning;*.=err               /var/log/security.log

          # Remote logging (configure remote server)
          # *.* @@remote-syslog-server:514

          # Disable rate limiting for security logs
          $SystemLogRateLimitInterval 0
          $SystemLogRateLimitBurst 0
        mode: '0644'
      become: yes
      notify: restart rsyslog

    - name: Configure logrotate for security logs
      ansible.builtin.copy:
        dest: /etc/logrotate.d/security-logs
        content: |
          /var/log/auth.log
          /var/log/kern.log
          /var/log/security.log
          /var/log/file-integrity.log
          {
              daily
              rotate 365
              compress
              delaycompress
              missingok
              notifempty
              create 0640 root adm
              sharedscripts
              postrotate
                  /usr/bin/systemctl reload rsyslog >/dev/null 2>&1 || true
              endscript
          }
        mode: '0644'
      become: yes

# Configure secure boot
- name: Configure UEFI Secure Boot
  block:
    - name: Check if system uses UEFI
      ansible.builtin.stat:
        path: /sys/firmware/efi
      register: efi_exists

    - name: Install Secure Boot tools
      ansible.builtin.apt:
        name:
          - mokutil
          - shim-signed
          - grub-efi-amd64-signed
        state: present
      become: yes
      when: efi_exists.stat.exists

    - name: Check Secure Boot status
      ansible.builtin.command: mokutil --sb-state
      register: sb_state
      changed_when: false
      when: efi_exists.stat.exists
  when: enable_secure_boot | default(true)

# Configure memory protection with PaX flags
- name: Configure PaX-compatible protections
  block:
    - name: Install paxctl
      ansible.builtin.apt:
        name: paxctl
        state: present
      become: yes
      failed_when: false

    - name: Apply PaX flags to critical binaries
      ansible.builtin.shell: |
        for binary in /usr/bin/python3 /usr/bin/perl /usr/bin/ruby; do
          if [ -f "$binary" ]; then
            paxctl -c -m "$binary" 2>/dev/null || true
          fi
        done
      become: yes
      failed_when: false
  when: enable_pax_flags | default(false)

# Configure network segmentation with netfilter
- name: Configure advanced netfilter rules
  block:
    - name: Install netfilter persistent
      ansible.builtin.apt:
        name: netfilter-persistent
        state: present
      become: yes

    - name: Create advanced firewall rules
      ansible.builtin.copy:
        dest: /etc/iptables/rules.v4
        content: |
          *filter
          :INPUT DROP [0:0]
          :FORWARD DROP [0:0]
          :OUTPUT ACCEPT [0:0]
          :DOCKER-USER - [0:0]

          # Allow loopback
          -A INPUT -i lo -j ACCEPT
          -A OUTPUT -o lo -j ACCEPT

          # Drop invalid packets
          -A INPUT -m conntrack --ctstate INVALID -j DROP

          # Allow established connections
          -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

          # ICMP rate limiting
          -A INPUT -p icmp -m limit --limit 1/s --limit-burst 2 -j ACCEPT
          -A INPUT -p icmp -j DROP

          # SSH rate limiting and protection
          -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -m recent --set
          -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 3 -j DROP
          -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT

          # Drop port scans
          -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
          -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
          -A INPUT -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
          -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
          -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

          # Log and drop everything else
          -A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7
          -A INPUT -j DROP

          COMMIT
        mode: '0644'
      become: yes
      notify: restart netfilter-persistent
  when: enable_advanced_firewall | default(true)

# Install security scanning tools
- name: Install security scanning tools
  ansible.builtin.apt:
    name:
      - lynis          # Security auditing
      - chkrootkit     # Rootkit scanner
      - clamav         # Antivirus
      - clamav-daemon
      - aide           # Intrusion detection
      - auditd         # System auditing
      - sysstat        # System monitoring
      - acct           # Process accounting
      - arpwatch       # ARP monitoring
      - tiger          # Security audit
      - tripwire       # File integrity
    state: present
  become: yes
  when: install_security_tools | default(true)

# Configure system resource limits
- name: Configure system resource limits
  ansible.builtin.copy:
    dest: /etc/security/limits.d/99-security-limits.conf
    content: |
      # Prevent fork bombs
      * hard nproc 1000
      * soft nproc 1000

      # Limit file descriptors
      * hard nofile 4096
      * soft nofile 1024

      # Limit core dumps
      * hard core 0
      * soft core 0

      # Limit memory usage
      * hard as 2097152
      * soft as 1048576

      # Limit maximum file size
      * hard fsize 1048576
      * soft fsize 524288
    mode: '0644'
  become: yes

# Final security check
- name: Run comprehensive security audit
  block:
    - name: Run Lynis security audit
      ansible.builtin.command: lynis audit system --quick --quiet
      register: lynis_output
      become: yes
      failed_when: false
      changed_when: false

    - name: Display security audit summary
      ansible.builtin.debug:
        msg: "Security audit completed. Check /var/log/lynis.log for details."
  when: run_final_audit | default(true)
