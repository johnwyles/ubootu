# Modern CLI Tools Configuration
# Generated by Ubuntu Bootstrap

# Helper function to check if command exists and provide helpful messages
check_command() {
    local cmd="$1"
    local friendly_name="${2:-$cmd}"
    local install_hint="$3"
    
    if command -v "$cmd"; then
        return 0
    else
        if [ -n "$install_hint" ]; then
            echo "[UBOOTU INFO] $friendly_name not found. To install: $install_hint" >&2
        else
            echo "[UBOOTU INFO] $friendly_name not found in PATH" >&2
        fi
        return 1
    fi
}

# Modern replacements aliases
{% if 'exa' in devtools_selected_modern_replacements or 'eza' in devtools_selected_modern_replacements %}
if check_command eza "eza (modern ls replacement)" "cargo install eza"; then
    alias ls='eza'
    alias ll='eza -la'
    alias la='eza -a'
    alias lt='eza --tree'
    alias l='eza -la'
elif check_command exa "exa (modern ls replacement)" "cargo install exa"; then
    alias ls='exa'
    alias ll='exa -la'
    alias la='exa -a'
    alias lt='exa --tree'
    alias l='exa -la'
fi
{% endif %}

{% if 'lsd' in devtools_selected_modern_replacements %}
if check_command lsd "lsd (LSDeluxe)" "cargo install lsd"; then
    alias lls='lsd -la'
fi
{% endif %}

{% if 'bat' in devtools_selected_modern_replacements %}
if check_command bat "bat (cat with syntax highlighting)" "cargo install bat"; then
    alias cat='bat --paging=never'
    alias catp='bat'
    export BAT_THEME="TwoDark"
elif check_command batcat "batcat (Ubuntu's bat package)" "sudo apt install bat"; then
    alias cat='batcat --paging=never'
    alias catp='batcat'
    alias bat='batcat'
    export BAT_THEME="TwoDark"
fi
{% endif %}

{% if 'ripgrep' in devtools_selected_modern_replacements %}
if check_command rg "ripgrep (fast grep alternative)" "cargo install ripgrep"; then
    export RIPGREP_CONFIG_PATH="$HOME/.config/ripgrep/config"
fi
{% endif %}

{% if 'fd' in devtools_selected_modern_replacements %}
if check_command fd "fd (fast find alternative)" "cargo install fd-find"; then
    alias find='fd'
fi
{% endif %}

{% if 'duf' in devtools_selected_modern_replacements %}
if command -v duf &> /dev/null; then
    alias df='duf'
fi
{% endif %}

{% if 'dust' in devtools_selected_modern_replacements %}
if command -v dust &> /dev/null; then
    alias du='dust'
fi
{% endif %}

{% if 'procs' in devtools_selected_modern_replacements %}
if command -v procs &> /dev/null; then
    alias ps='procs'
fi
{% endif %}

{% if 'bottom' in devtools_selected_modern_replacements %}
if command -v btm &> /dev/null; then
    alias top='btm'
    alias htop='btm'
fi
{% endif %}

{% if 'btop' in devtools_selected_modern_replacements %}
if command -v btop &> /dev/null; then
    alias top='btop'
fi
{% endif %}

{% if 'dog' in devtools_selected_modern_replacements %}
if command -v dog &> /dev/null; then
    alias dig='dog'
fi
{% endif %}

{% if 'delta' in devtools_selected_modern_replacements %}
if command -v delta &> /dev/null; then
    git config --global core.pager "delta"
    git config --global interactive.diffFilter "delta --color-only"
    git config --global delta.navigate true
    git config --global delta.light false
    git config --global delta.line-numbers true
fi
{% endif %}

{% if 'sd' in devtools_selected_modern_replacements %}
if command -v sd &> /dev/null; then
    # sd is not a drop-in replacement for sed, so we don't alias it
    # but we can create a helper function
    sdr() {
        sd "$1" "$2" < "$3" > "$3.tmp" && mv "$3.tmp" "$3"
    }
fi
{% endif %}

# File manager shortcuts
{% if 'ranger' in devtools_selected_file_managers %}
alias r='ranger'
{% endif %}

{% if 'nnn' in devtools_selected_file_managers %}
alias n='nnn -de'
export NNN_PLUG='f:finder;o:fzopen;p:preview-tui;d:diffs;t:nmount;v:imgview'
export NNN_FIFO=/tmp/nnn.fifo
{% endif %}

{% if 'lf' in devtools_selected_file_managers %}
alias lf='lf'
{% endif %}

{% if 'mc' in devtools_selected_file_managers %}
alias mc='mc'
{% endif %}

# Git shortcuts
{% if 'lazygit' in devtools_selected_dev_cli_tools %}
alias lg='lazygit'
{% endif %}

{% if 'tig' in devtools_selected_dev_cli_tools %}
alias t='tig'
{% endif %}

{% if 'gh' in devtools_selected_dev_cli_tools %}
# GitHub CLI shortcuts
alias ghs='gh status'
alias ghpr='gh pr'
alias ghi='gh issue'
alias ghr='gh repo'
{% endif %}

{% if 'glab' in devtools_selected_dev_cli_tools %}
# GitLab CLI shortcuts
alias glmr='glab mr'
alias gli='glab issue'
{% endif %}

# FZF configuration
{% if 'fzf' in devtools_selected_modern_replacements %}
if [ -f ~/.fzf.bash ]; then
    source ~/.fzf.bash
fi

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border --multi'

if command -v fd; then
    # Use fd for better performance
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
elif command -v rg; then
    echo "[UBOOTU INFO] Using ripgrep for FZF (fd not found)" >&2
    export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
else
    echo "[UBOOTU WARNING] Neither fd nor ripgrep found, FZF will use basic find" >&2
    export FZF_DEFAULT_COMMAND='find . -type f -not -path "*/\.git/*"'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# Useful fzf functions
fkill() {
    local pid
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    if [ "x$pid" != "x" ]; then
        echo $pid | xargs kill -${1:-9}
    fi
}

fcd() {
    local dir
    dir=$(find ${1:-.} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) && cd "$dir"
}

fh() {
    eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}
{% endif %}

# Zoxide configuration
{% if 'zoxide' in devtools_selected_productivity_tools %}
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init bash)"
    alias cd='z'
    alias cdi='zi'
fi
{% endif %}

# Starship prompt
{% if 'starship' in devtools_selected_productivity_tools %}
if command -v starship &> /dev/null; then
    eval "$(starship init bash)"
fi
{% endif %}

# thefuck configuration
{% if 'thefuck' in devtools_selected_productivity_tools %}
if command -v thefuck &> /dev/null; then
    eval $(thefuck --alias)
    alias f='fuck'
fi
{% endif %}

# autojump configuration
{% if 'autojump' in devtools_selected_productivity_tools %}
if [ -f /usr/share/autojump/autojump.sh ]; then
    source /usr/share/autojump/autojump.sh
fi
{% endif %}

# direnv configuration
{% if 'direnv' in devtools_selected_productivity_tools %}
if command -v direnv &> /dev/null; then
    eval "$(direnv hook bash)"
fi
{% endif %}

# ASDF configuration
{% if 'asdf' in devtools_selected_productivity_tools %}
if [ -f "$HOME/.asdf/asdf.sh" ]; then
    source "$HOME/.asdf/asdf.sh"
    if [ -f "$HOME/.asdf/completions/asdf.bash" ]; then
        source "$HOME/.asdf/completions/asdf.bash"
    fi
fi
{% endif %}

# Helpful functions
mkcd() {
    mkdir -p "$1" && cd "$1"
}

extract() {
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)   tar xjf "$1"   ;;
            *.tar.gz)    tar xzf "$1"   ;;
            *.bz2)       bunzip2 "$1"   ;;
            *.rar)       unrar x "$1"   ;;
            *.gz)        gunzip "$1"    ;;
            *.tar)       tar xf "$1"    ;;
            *.tbz2)      tar xjf "$1"   ;;
            *.tgz)       tar xzf "$1"   ;;
            *.zip)       unzip "$1"     ;;
            *.Z)         uncompress "$1";;
            *.7z)        7z x "$1"      ;;
            *)           echo "'$1' cannot be extracted" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Quick backup function
backup() {
    cp "$1" "$1.bak.$(date +%Y%m%d_%H%M%S)"
}

# Network information
myip() {
    echo "Local IP: $(hostname -I | awk '{print $1}')"
    echo "Public IP: $(curl -s ifconfig.me)"
}

# System information aliases
alias ports='netstat -tulanp'
alias meminfo='free -h'
alias cpuinfo='lscpu'
alias diskinfo='df -h'

# Quick edit configs
alias bashrc='${EDITOR:-nano} ~/.bashrc'
alias zshrc='${EDITOR:-nano} ~/.zshrc'
alias vimrc='${EDITOR:-nano} ~/.vimrc'

# Safety nets
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ln='ln -i'

# Colorize commands
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# More readable outputs
alias mount='mount | column -t'
alias path='echo -e ${PATH//:/\\n}'

# Quick directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Git shortcuts (non-tool specific)
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias gcm='git commit -m'
alias glog='git log --oneline --decorate --graph'

# Docker shortcuts (if Docker is installed)
if command -v docker &> /dev/null; then
    alias dps='docker ps'
    alias dpsa='docker ps -a'
    alias di='docker images'
    alias drm='docker rm'
    alias drmi='docker rmi'
    alias dstop='docker stop'
    alias dstart='docker start'
    alias dlogs='docker logs'
    alias dexec='docker exec -it'
fi

# Enable color support for ls and grep
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Set default editor
export EDITOR="${EDITOR:-vim}"
export VISUAL="${VISUAL:-$EDITOR}"

# History settings
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTCONTROL=ignoredups:erasedups
shopt -s histappend

# Better completion
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

# Colored man pages
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'