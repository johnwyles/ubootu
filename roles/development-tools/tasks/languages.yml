---
# Comprehensive programming language support

# C/C++ Compilers and Tools
- name: Install C/C++ development tools
  ansible.builtin.apt:
    name:
      - build-essential
      - gcc
      - g++
      - clang
      - clang-tools
      - clang-format
      - clang-tidy
      - cmake
      - cmake-curses-gui
      - gdb
      - valgrind
      - libboost-all-dev
      - pkg-config
      - autoconf
      - automake
      - libtool
    state: present
  become: yes
  when: "'c_cpp' in devtools_languages"

# Python - Multiple Versions
- name: Install Python versions and tools
  block:
    - name: Add deadsnakes PPA for multiple Python versions
      ansible.builtin.apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present
      become: yes
      when:
        - use_third_party_repos | default(true)
        - ansible_distribution == 'Ubuntu'

    - name: Install Python versions
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - python3-dev
          - python3.8
          - python3.8-venv
          - python3.8-dev
          - python3.9
          - python3.9-venv
          - python3.9-dev
          - python3.10
          - python3.10-venv
          - python3.10-dev
          - python3.11
          - python3.11-venv
          - python3.11-dev
          - python3.12
          - python3.12-venv
          - python3.12-dev
        state: present
      become: yes
      ignore_errors: yes  # Some versions might not be available on all Ubuntu versions

    - name: Install Python package managers
      ansible.builtin.pip:
        name:
          - pipenv
          - poetry
          - virtualenv
        state: present
      become: yes
      when: "'pip' in devtools_package_managers"
  when: "'python' in devtools_languages"

# Node.js - Multiple Versions via NVM or NodeSource
- name: Install Node.js
  block:
    - name: Add NodeSource repository key
      ansible.builtin.apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
      become: yes
      when: use_third_party_repos | default(true)

    - name: Add NodeSource LTS repository
      ansible.builtin.apt_repository:
        repo: "deb https://deb.nodesource.com/node_20.x {{ ansible_distribution_release }} main"
        state: present
      become: yes
      when: use_third_party_repos | default(true)

    - name: Install Node.js
      ansible.builtin.apt:
        name: nodejs
        state: present
      become: yes

    - name: Install additional Node.js package managers
      ansible.builtin.shell: |
        npm install -g yarn pnpm
      become: yes
      when: "'npm' in devtools_package_managers"
  when: "'nodejs' in devtools_languages"

# Go Language
- name: Install Go
  block:
    - name: Download Go binary
      ansible.builtin.get_url:
        url: "https://go.dev/dl/go1.21.5.linux-amd64.tar.gz"
        dest: /tmp/go.tar.gz
        mode: '0644'
      when: use_third_party_repos | default(true)

    - name: Extract Go
      ansible.builtin.unarchive:
        src: /tmp/go.tar.gz
        dest: /usr/local
        remote_src: yes
        creates: /usr/local/go/bin/go
      become: yes
      when: use_third_party_repos | default(true)

    - name: Install Go from apt (fallback)
      ansible.builtin.apt:
        name: golang-go
        state: present
      become: yes
      when: not (use_third_party_repos | default(true))

    - name: Set Go environment variables
      ansible.builtin.lineinfile:
        path: "/home/{{ primary_user }}/.bashrc"
        line: "{{ item }}"
        create: yes
      become: yes
      become_user: "{{ primary_user }}"
      loop:
        - 'export PATH=$PATH:/usr/local/go/bin'
        - 'export GOPATH=$HOME/go'
        - 'export PATH=$PATH:$GOPATH/bin'
  when: "'go' in devtools_languages"

# Rust - via rustup
- name: Install Rust
  block:
    - name: Install Rust dependencies
      ansible.builtin.apt:
        name:
          - curl
          - build-essential
        state: present
      become: yes

    - name: Check if rustup is installed
      ansible.builtin.stat:
        path: "/home/{{ primary_user }}/.cargo/bin/rustc"
      register: rust_installed

    - name: Install rustup
      ansible.builtin.shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      become: yes
      become_user: "{{ primary_user }}"
      when: not rust_installed.stat.exists
  when: "'rust' in devtools_languages"

# Java - Multiple Versions
- name: Install Java
  block:
    - name: Add Adoptium repository key
      ansible.builtin.apt_key:
        url: https://packages.adoptium.net/artifactory/api/gpg/key/public
        state: present
      become: yes
      when: use_third_party_repos | default(true)

    - name: Add Adoptium repository
      ansible.builtin.apt_repository:
        repo: "deb https://packages.adoptium.net/artifactory/deb {{ ansible_distribution_release }} main"
        state: present
      become: yes
      when: use_third_party_repos | default(true)

    - name: Install Java versions
      ansible.builtin.apt:
        name:
          - "{{ 'temurin-8-jdk' if use_third_party_repos else 'openjdk-8-jdk' }}"
          - "{{ 'temurin-11-jdk' if use_third_party_repos else 'openjdk-11-jdk' }}"
          - "{{ 'temurin-17-jdk' if use_third_party_repos else 'openjdk-17-jdk' }}"
          - "{{ 'temurin-21-jdk' if use_third_party_repos else 'openjdk-21-jdk' }}"
        state: present
      become: yes
      ignore_errors: yes  # Some versions might not be available

    - name: Install Java build tools
      ansible.builtin.apt:
        name:
          - maven
          - gradle
        state: present
      become: yes
      when: "'maven' in devtools_package_managers"
  when: "'java' in devtools_languages"

# C#/.NET
- name: Install .NET SDK
  block:
    - name: Add Microsoft package repository
      ansible.builtin.shell: |
        wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb \
          -O packages-microsoft-prod.deb
        dpkg -i packages-microsoft-prod.deb
        rm packages-microsoft-prod.deb
      become: yes
      when: use_third_party_repos | default(true)

    - name: Install .NET SDK
      ansible.builtin.apt:
        name:
          - dotnet-sdk-6.0
          - dotnet-sdk-7.0
          - dotnet-sdk-8.0
        state: present
        update_cache: yes
      become: yes
  when: "'dotnet' in devtools_languages"

# Ruby
- name: Install Ruby
  block:
    - name: Install Ruby and dependencies
      ansible.builtin.apt:
        name:
          - ruby-full
          - ruby-dev
          - rubygems
        state: present
      become: yes

    - name: Install bundler
      ansible.builtin.gem:
        name: bundler
        state: present
      become: yes
      when: "'gem' in devtools_package_managers"
  when: "'ruby' in devtools_languages"

# PHP
- name: Install PHP
  block:
    - name: Add PHP PPA
      ansible.builtin.apt_repository:
        repo: ppa:ondrej/php
        state: present
      become: yes
      when:
        - use_third_party_repos | default(true)
        - ansible_distribution == 'Ubuntu'

    - name: Install PHP and extensions
      ansible.builtin.apt:
        name:
          - php
          - php-cli
          - php-common
          - php-mbstring
          - php-xml
          - php-curl
          - php-zip
          - php-gd
          - php-mysql
          - php-pgsql
          - php-redis
          - php-mongodb
          - php-dev
          - php-pear
        state: present
      become: yes

    - name: Install Composer
      ansible.builtin.shell: |
        curl -sS https://getcomposer.org/installer | php
        mv composer.phar /usr/local/bin/composer
        chmod +x /usr/local/bin/composer
      become: yes
      args:
        creates: /usr/local/bin/composer
      when: "'composer' in devtools_package_managers"
  when: "'php' in devtools_languages"

# Swift
- name: Install Swift
  block:
    - name: Install Swift dependencies
      ansible.builtin.apt:
        name:
          - binutils
          - git
          - gnupg2
          - libc6-dev
          - libcurl4
          - libedit2
          - libgcc-9-dev
          - libpython2.7
          - libsqlite3-0
          - libstdc++-9-dev
          - libxml2
          - libz3-dev
          - pkg-config
          - tzdata
          - zlib1g-dev
        state: present
      become: yes

    - name: Download Swift
      ansible.builtin.get_url:
        url: "https://download.swift.org/swift-5.9.2-release/ubuntu2204/swift-5.9.2-RELEASE/swift-5.9.2-RELEASE-ubuntu22.04.tar.gz"
        dest: /tmp/swift.tar.gz
      when: ansible_distribution_version == '22.04'

    - name: Extract Swift
      ansible.builtin.unarchive:
        src: /tmp/swift.tar.gz
        dest: /usr/local
        remote_src: yes
        creates: /usr/local/swift-5.9.2-RELEASE-ubuntu22.04/usr/bin/swift
      become: yes
      when: ansible_distribution_version == '22.04'

    - name: Create Swift symlinks
      ansible.builtin.file:
        src: "/usr/local/swift-5.9.2-RELEASE-ubuntu22.04/usr/bin/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        state: link
      become: yes
      loop:
        - swift
        - swiftc
      when: ansible_distribution_version == '22.04'
  when: "'swift' in devtools_languages"

# Kotlin
- name: Install Kotlin
  block:
    - name: Install Kotlin via SDKMAN
      ansible.builtin.shell: |
        source ~/.sdkman/bin/sdkman-init.sh
        sdk install kotlin
      become: yes
      become_user: "{{ primary_user }}"
      args:
        executable: /bin/bash
      when: devtools_install_sdkman

    - name: Install Kotlin manually
      block:
        - name: Download Kotlin compiler
          ansible.builtin.get_url:
            url: "https://github.com/JetBrains/kotlin/releases/download/v1.9.21/kotlin-compiler-1.9.21.zip"
            dest: /tmp/kotlin-compiler.zip

        - name: Extract Kotlin
          ansible.builtin.unarchive:
            src: /tmp/kotlin-compiler.zip
            dest: /opt
            remote_src: yes
            creates: /opt/kotlinc
          become: yes

        - name: Create Kotlin symlinks
          ansible.builtin.file:
            src: "/opt/kotlinc/bin/{{ item }}"
            dest: "/usr/local/bin/{{ item }}"
            state: link
          become: yes
          loop:
            - kotlinc
            - kotlin
      when: not devtools_install_sdkman
  when: "'kotlin' in devtools_languages"

# Zig
- name: Install Zig
  block:
    - name: Download Zig
      ansible.builtin.get_url:
        url: "https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz"
        dest: /tmp/zig.tar.xz

    - name: Extract Zig
      ansible.builtin.unarchive:
        src: /tmp/zig.tar.xz
        dest: /opt
        remote_src: yes
        creates: /opt/zig-linux-x86_64-0.11.0
      become: yes

    - name: Create Zig symlink
      ansible.builtin.file:
        src: "/opt/zig-linux-x86_64-0.11.0/zig"
        dest: "/usr/local/bin/zig"
        state: link
      become: yes
  when: "'zig' in devtools_languages"

# Perl
- name: Install Perl
  ansible.builtin.apt:
    name:
      - perl
      - perl-doc
      - libperl-dev
      - cpanminus
    state: present
  become: yes
  when: "'perl' in devtools_languages"

# Lua
- name: Install Lua
  ansible.builtin.apt:
    name:
      - lua5.4
      - liblua5.4-dev
      - luarocks
    state: present
  become: yes
  when: "'lua' in devtools_languages"

# R
- name: Install R
  block:
    - name: Add R repository key
      ansible.builtin.apt_key:
        keyserver: keyserver.ubuntu.com
        id: E298A3A825C0D65DFD57CBB651716619E084DAB9
        state: present
      become: yes
      when: use_third_party_repos | default(true)

    - name: Add R repository
      ansible.builtin.apt_repository:
        repo: "deb https://cloud.r-project.org/bin/linux/ubuntu {{ ansible_distribution_release }}-cran40/"
        state: present
      become: yes
      when: use_third_party_repos | default(true)

    - name: Install R
      ansible.builtin.apt:
        name:
          - r-base
          - r-base-dev
          - r-recommended
        state: present
        update_cache: yes
      become: yes
  when: "'r' in devtools_languages"

# Haskell
- name: Install Haskell
  block:
    - name: Install Haskell Stack
      ansible.builtin.shell: |
        curl -sSL https://get.haskellstack.org/ | sh
      become: yes
      args:
        creates: /usr/local/bin/stack

    - name: Install GHC via Stack
      ansible.builtin.shell: |
        stack setup
      become: yes
      become_user: "{{ primary_user }}"
  when: "'haskell' in devtools_languages"

# Erlang/Elixir
- name: Install Erlang and Elixir
  block:
    - name: Add Erlang Solutions repository key
      ansible.builtin.apt_key:
        url: https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc
        state: present
      become: yes
      when: use_third_party_repos | default(true)

    - name: Add Erlang Solutions repository
      ansible.builtin.apt_repository:
        repo: "deb https://packages.erlang-solutions.com/ubuntu {{ ansible_distribution_release }} contrib"
        state: present
      become: yes
      when: use_third_party_repos | default(true)

    - name: Install Erlang and Elixir
      ansible.builtin.apt:
        name:
          - esl-erlang
          - elixir
        state: present
        update_cache: yes
      become: yes
  when: "'erlang' in devtools_languages"

# OCaml
- name: Install OCaml
  block:
    - name: Install OCaml and OPAM
      ansible.builtin.apt:
        name:
          - ocaml
          - opam
          - build-essential
        state: present
      become: yes

    - name: Initialize OPAM
      ansible.builtin.shell: |
        opam init --disable-sandboxing -y
        eval $(opam env)
      become: yes
      become_user: "{{ primary_user }}"
  when: "'ocaml' in devtools_languages"

# F#
- name: Install F#
  ansible.builtin.apt:
    name: fsharp
    state: present
  become: yes
  when:
    - "'fsharp' in devtools_languages"
    - "'dotnet' in devtools_languages"  # F# requires .NET

# Clojure
- name: Install Clojure
  block:
    - name: Install Clojure dependencies
      ansible.builtin.apt:
        name:
          - curl
          - rlwrap
        state: present
      become: yes

    - name: Install Clojure
      ansible.builtin.shell: |
        curl -O https://download.clojure.org/install/linux-install-1.11.1.1435.sh
        chmod +x linux-install-1.11.1.1435.sh
        ./linux-install-1.11.1.1435.sh
      become: yes
      args:
        creates: /usr/local/bin/clojure

    - name: Install Leiningen
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
        dest: /usr/local/bin/lein
        mode: '0755'
      become: yes
  when: "'clojure' in devtools_languages"

# Scala
- name: Install Scala
  block:
    - name: Install Scala via SDKMAN
      ansible.builtin.shell: |
        source ~/.sdkman/bin/sdkman-init.sh
        sdk install scala
        sdk install sbt
      become: yes
      become_user: "{{ primary_user }}"
      args:
        executable: /bin/bash
      when: devtools_install_sdkman

    - name: Install Scala manually
      ansible.builtin.apt:
        name:
          - scala
        state: present
      become: yes
      when: not devtools_install_sdkman
  when: "'scala' in devtools_languages"

# Julia
- name: Install Julia
  block:
    - name: Download Julia
      ansible.builtin.get_url:
        url: "https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-1.9.4-linux-x86_64.tar.gz"
        dest: /tmp/julia.tar.gz

    - name: Extract Julia
      ansible.builtin.unarchive:
        src: /tmp/julia.tar.gz
        dest: /opt
        remote_src: yes
        creates: /opt/julia-1.9.4
      become: yes

    - name: Create Julia symlink
      ansible.builtin.file:
        src: "/opt/julia-1.9.4/bin/julia"
        dest: "/usr/local/bin/julia"
        state: link
      become: yes
  when: "'julia' in devtools_languages"

# Dart/Flutter
- name: Install Dart and Flutter
  block:
    - name: Install Flutter dependencies
      ansible.builtin.apt:
        name:
          - curl
          - git
          - unzip
          - xz-utils
          - zip
          - libglu1-mesa
        state: present
      become: yes

    - name: Download Flutter SDK
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.16.5-stable.tar.xz"
        dest: /tmp/flutter.tar.xz

    - name: Extract Flutter
      ansible.builtin.unarchive:
        src: /tmp/flutter.tar.xz
        dest: /opt
        remote_src: yes
        creates: /opt/flutter
      become: yes

    - name: Set Flutter PATH
      ansible.builtin.lineinfile:
        path: "/home/{{ primary_user }}/.bashrc"
        line: 'export PATH="$PATH:/opt/flutter/bin"'
        create: yes
      become: yes
      become_user: "{{ primary_user }}"

    - name: Accept Flutter licenses
      ansible.builtin.shell: |
        /opt/flutter/bin/flutter doctor --android-licenses -y
      become: yes
      become_user: "{{ primary_user }}"
      ignore_errors: yes
  when: "'dart' in devtools_languages"

# TypeScript
- name: Install TypeScript
  ansible.builtin.shell: |
    npm install -g typescript ts-node @types/node
  become: yes
  when:
    - "'typescript' in devtools_languages"
    - "'nodejs' in devtools_languages"  # TypeScript requires Node.js

# CoffeeScript
- name: Install CoffeeScript
  ansible.builtin.shell: |
    npm install -g coffeescript
  become: yes
  when:
    - "'coffeescript' in devtools_languages"
    - "'nodejs' in devtools_languages"  # CoffeeScript requires Node.js

# Conda/Mamba
- name: Install Miniconda
  block:
    - name: Download Miniconda installer
      ansible.builtin.get_url:
        url: "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"
        dest: /tmp/miniconda.sh
        mode: '0755'

    - name: Install Miniconda
      ansible.builtin.shell: |
        /tmp/miniconda.sh -b -p /home/{{ primary_user }}/miniconda3
      become: yes
      become_user: "{{ primary_user }}"
      args:
        creates: "/home/{{ primary_user }}/miniconda3"

    - name: Initialize Conda
      ansible.builtin.shell: |
        /home/{{ primary_user }}/miniconda3/bin/conda init bash
      become: yes
      become_user: "{{ primary_user }}"

    - name: Install Mamba
      ansible.builtin.shell: |
        /home/{{ primary_user }}/miniconda3/bin/conda install -n base -c conda-forge mamba -y
      become: yes
      become_user: "{{ primary_user }}"
  when: "'conda' in devtools_package_managers"
