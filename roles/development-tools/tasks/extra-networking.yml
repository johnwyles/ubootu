---
# Additional networking tools and utilities

# Include repo codename mapping if not already set
- name: Ensure repo_codename is set
  ansible.builtin.set_fact:
    repo_codename: >-
      {{ repo_codename | default(ansible_distribution_release == 'plucky' |
         ternary('noble', ansible_distribution_release)) }}
  when: repo_codename is not defined

# Network monitoring and analysis tools
- name: Install network monitoring tools (iftop, nethogs, vnstat, etc.)
  ansible.builtin.apt:
    name:
      - iftop         # Display bandwidth usage
      - nethogs       # Per-process bandwidth monitor
      - vnstat        # Network statistics
      - vnstati       # vnstat graph generator
      - iptraf-ng     # IP traffic monitor
      - nload         # Real-time network traffic
      - bmon          # Bandwidth monitor
      - slurm         # Network load monitor
      - tcptrack      # TCP connection monitor
      - iptstate      # IPtables state viewer
      - conntrack     # Connection tracking
      - iproute2      # Contains ss command - socket statistics (newer netstat)
      - mtr           # My traceroute - network diagnostic
      - nmap          # Network exploration (if not in security-tools)
      - tcpdump       # Packet analyzer
      - tshark        # Terminal Wireshark
      - termshark     # Terminal UI for tshark
      # bandwhich     # Terminal bandwidth utilization - not in Ubuntu repos
      - gping         # Ping with graph
    state: present
  become: yes

# DNS tools
- name: Install DNS utilities (dig, nslookup, bind-utils)
  ansible.builtin.apt:
    name:
      - dnsutils      # dig, nslookup, host
      - ldnsutils     # Advanced DNS tools
      - dnstop        # DNS traffic monitor
      - dnstracer     # DNS tracing
      - dnsmasq       # DNS forwarder
      - bind9-utils   # DNS utilities
      # dog will be installed via snap below
    state: present
  become: yes

# Install dog DNS client via snap (not available in apt)
- name: Install dog DNS client via snap (if 'dog' selected)
  snap:
    name: dog
    state: present
  become: yes
  when: "'dog' in selected_items"

# Speed test tools
- name: Install Speedtest CLI official Ookla version (if speedtest tools selected)
  block:
    - name: Check if Speedtest repository supports current Ubuntu version
      ansible.builtin.uri:
        url: "https://packagecloud.io/ookla/speedtest-cli/ubuntu/dists/{{ repo_codename | default('noble') }}/Release"
        method: HEAD
        timeout: 10
      register: speedtest_repo_check
      failed_when: false

    - name: Download Speedtest GPG key
      ansible.builtin.get_url:
        url: https://packagecloud.io/ookla/speedtest-cli/gpgkey
        dest: /tmp/speedtest.asc
      become: yes
      when: speedtest_repo_check.status == 200

    - name: Convert and install Speedtest GPG key
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/speedtest.asc > /usr/share/keyrings/speedtest.gpg
        chmod 644 /usr/share/keyrings/speedtest.gpg
      args:
        creates: /usr/share/keyrings/speedtest.gpg
      become: yes
      when: speedtest_repo_check.status == 200

    - name: Add Speedtest repository with signed-by
      apt_repository:
        repo: >-
          deb [signed-by=/usr/share/keyrings/speedtest.gpg]
          https://packagecloud.io/ookla/speedtest-cli/ubuntu/
          {{ repo_codename | default('noble') }} main
        state: present
        filename: speedtest
      become: yes
      when: speedtest_repo_check.status == 200

    - name: Install Speedtest CLI from repository
      ansible.builtin.apt:
        name: speedtest
        state: present
        update_cache: yes
      become: yes
      when: speedtest_repo_check.status == 200

    - name: Install speedtest-cli Python package as fallback
      ansible.builtin.apt:
        name: speedtest-cli
        state: present
      become: yes
      when: speedtest_repo_check.status != 200

# Fast.com CLI
- name: Install fast-cli
  npm:
    name: fast-cli
    global: yes
    state: present
  become: yes
  when: "'nodejs' in development_languages"

# Network discovery and scanning
- name: Install network discovery tools (arp-scan, netdiscover, fping)
  ansible.builtin.apt:
    name:
      - arp-scan      # ARP scanner
      - netdiscover   # Active/passive ARP reconnaissance
      - fping         # Parallel ping
      - nast          # Network analyzer sniffer tool
      - ettercap-common  # Network sniffer/interceptor
      - ettercap-graphical  # Ettercap GUI
      - driftnet      # Network image sniffer
      - darkstat      # Network statistics gatherer
    state: present
  become: yes

# Proxy and tunnel tools
- name: Install proxy and tunnel tools (proxychains, socat, sshuttle)
  ansible.builtin.apt:
    name:
      - proxychains4  # Proxy chains
      - tsocks        # Transparent SOCKS proxy
      - redsocks      # Redirect TCP to SOCKS/HTTPS proxy
      - socat         # Multipurpose relay
      - stunnel4      # SSL tunnel
      - httptunnel    # Tunnel over HTTP
      - sshuttle      # VPN over SSH
      - autossh       # Automatically restart SSH sessions
      - sslh          # SSL/SSH multiplexer
    state: present
  become: yes

# Configure sslh to not start automatically (needs proper configuration)
- name: Disable sslh service until configured
  ansible.builtin.systemd:
    name: sslh
    enabled: no
    state: stopped
  become: yes
  when: "'sslh' in (ansible_facts.packages | default({}))"
  failed_when: false

# VPN clients
- name: Install additional VPN clients (strongswan, pptp, l2tp)
  ansible.builtin.apt:
    name:
      - strongswan    # IPsec VPN
      - xl2tpd        # L2TP daemon
      - pptp-linux    # PPTP client
      - network-manager-l2tp
      - network-manager-l2tp-gnome
      - network-manager-pptp
      - network-manager-pptp-gnome
      - network-manager-strongswan
      - network-manager-iodine
      - network-manager-iodine-gnome
    state: present
  become: yes

# Mesh networking tools
- name: Install Nebula mesh networking (if mesh networking selected)
  block:
    - name: Check latest Nebula release
      ansible.builtin.uri:
        url: https://api.github.com/repos/slackhq/nebula/releases/latest
        return_content: yes
      register: nebula_release

    - name: Set Nebula download URL
      ansible.builtin.set_fact:
        nebula_url: >
          {{ nebula_release.json.assets |
             selectattr('name', 'match', '.*linux-amd64\\.tar\\.gz$') |
             map(attribute='browser_download_url') | first | default('') }}
      when:
        - nebula_release is succeeded
        - nebula_release.json.assets is defined

    - name: Download and extract Nebula
      ansible.builtin.unarchive:
        src: "{{ nebula_url }}"
        dest: /usr/local/bin
        remote_src: yes
        mode: '0755'
        owner: root
        group: root
      become: yes
      when:
        - nebula_url is defined
        - nebula_url != ''
        - nebula_url != '\n'

# Network simulation and testing
- name: Install network testing tools
  ansible.builtin.apt:
    name:
      - iperf         # Network performance testing
      - iperf3        # Network performance testing v3
      - netperf       # Network performance benchmark
      - nuttcp        # Network performance measurement
      - lft           # Layer four traceroute
      # paris-traceroute  # Paris traceroute - not in Ubuntu repos
      - moreutils     # Additional Unix utilities
      - ipcalc        # IP address calculator
      - sipcalc       # Advanced IP calculator
      - subnetcalc    # IPv4/IPv6 subnet calculator
      # whatmask      # Subnet mask notation converter - not in Ubuntu repos
    state: present
  become: yes

# GUI Network tools
- name: Install GUI network tools
  ansible.builtin.apt:
    name:
      - wireshark     # Network protocol analyzer
      - etherape      # Graphical network monitor
      - gufw          # GUI for UFW firewall
      - nm-connection-editor  # Network Manager GUI
      - gnome-nettool # GNOME network tools
      - d-feet        # D-Bus debugger
    state: present
  become: yes
  when: desktop_environment is defined

# Advanced routing tools
- name: Install routing and traffic control tools
  ansible.builtin.apt:
    name:
      - iproute2      # IP routing utilities
      - bridge-utils  # Ethernet bridge utilities
      - vlan          # VLAN utilities
      - batctl        # B.A.T.M.A.N. advanced control
      - babeld        # Babel routing daemon
      - bird2         # Internet routing daemon
      - frr           # FRRouting protocol suite
      - quagga        # Routing software suite
      - keepalived    # High availability
      - ucarp         # Common Address Redundancy Protocol
      - conntrackd    # Connection tracking daemon
      - ipvsadm       # Linux Virtual Server
      - haproxy       # High availability load balancer
      - nginx         # Web server/reverse proxy
    state: present
  become: yes
  failed_when: false

# Container networking tools
- name: Install container networking tools
  ansible.builtin.apt:
    name:
      - docker-compose
      - podman-compose
      - cni-plugins   # Container Network Interface plugins
      - containernetworking-plugins
    state: present
  become: yes
  when: install_docker | default(false)

# WebRTC and real-time communication
- name: Install WebRTC tools
  snap:
    name:
      - peerconnection-server-test
    state: present
  become: yes
  when: enable_snap | default(true)
  failed_when: false

# Network file systems
- name: Install network file system tools
  ansible.builtin.apt:
    name:
      - nfs-common    # NFS client
      - cifs-utils    # SMB/CIFS utilities
      - sshfs         # SSH filesystem
      - davfs2        # WebDAV filesystem
      - curlftpfs     # FTP filesystem
      - s3fs          # Amazon S3 filesystem
      - rclone        # Cloud storage sync
    state: present
  become: yes

# mDNS/Zeroconf tools
- name: Install mDNS/Zeroconf tools
  ansible.builtin.apt:
    name:
      - avahi-daemon
      - avahi-discover
      - avahi-utils
      - libnss-mdns
      - mdns-scan
    state: present
  become: yes

# Create network tools aliases and helpers
- name: Create network helper scripts directory
  ansible.builtin.file:
    path: /usr/local/share/network-scripts
    state: directory
    mode: '0755'
  become: yes

- name: Create network monitoring dashboard script
  ansible.builtin.copy:
    dest: /usr/local/bin/netdash
    content: |
      #!/bin/bash
      # Network monitoring dashboard using tmux

      SESSION="netdash"

      tmux new-session -d -s $SESSION

      # Window 0 - bandwidth monitor
      tmux rename-window -t $SESSION:0 'Bandwidth'
      tmux send-keys -t $SESSION:0 'sudo iftop' C-m

      # Window 1 - connection monitor
      tmux new-window -t $SESSION:1 -n 'Connections'
      tmux send-keys -t $SESSION:1 'sudo nethogs' C-m

      # Window 2 - network statistics
      tmux new-window -t $SESSION:2 -n 'Stats'
      tmux send-keys -t $SESSION:2 'vnstat -l' C-m

      # Window 3 - active connections
      tmux new-window -t $SESSION:3 -n 'Active'
      tmux send-keys -t $SESSION:3 'watch -n 1 "ss -tunap | grep ESTAB"' C-m

      tmux select-window -t $SESSION:0
      tmux attach-session -t $SESSION
    mode: '0755'
  become: yes

# Install Python network libraries
- name: Install Python networking libraries via apt
  ansible.builtin.apt:
    name:
      - python3-scapy      # Packet manipulation
      - python3-netaddr    # Network address manipulation
      - python3-netifaces  # Network interface information
      - python3-nmap       # Nmap wrapper
      - python3-paramiko   # SSH2 protocol library
    state: present
  become: yes
  when: "'python' in development_languages"

# Install remaining Python libraries that aren't in apt
- name: Install pipx for Python packages not in apt
  ansible.builtin.apt:
    name: pipx
    state: present
  become: yes
  when: "'python' in development_languages"

- name: Install Python libraries via pipx
  ansible.builtin.shell: |
    pipx install {{ item }}
  loop:
    - netmiko  # Multi-vendor network device SSH
    - napalm   # Network automation
  become: yes
  become_user: "{{ ansible_user_id }}"
  when: "'python' in development_languages"
  failed_when: false
