---
# System health checks for boot issues

- name: Create system health check script
  ansible.builtin.template:
    src: health-check.sh.j2
    dest: /usr/local/bin/system-health-check
    mode: '0755'
  become: yes

- name: Create systemd service for health checks
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=System Health Check After Boot
      After=multi-user.target graphical.target

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/system-health-check
      RemainAfterExit=yes
      StandardOutput=journal
      StandardError=journal

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/boot-health-check.service
    mode: '0644'
  become: yes

- name: Enable boot health check service
  ansible.builtin.systemd:
    name: boot-health-check
    enabled: yes
    daemon_reload: yes
  become: yes

- name: Create storage health monitoring script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Check for storage device errors

      echo "=== Storage Device Health Check ==="

      # Check dmesg for I/O errors
      if dmesg | grep -q "I/O error"; then
          echo "WARNING: I/O errors detected in system log!"
          dmesg | grep "I/O error" | tail -10
          echo
          echo "Affected devices:"
          dmesg | grep "I/O error" | grep -o "dev [a-z]*" | sort | uniq
      fi

      # Check for failed mounts
      if systemctl list-units --failed | grep -q "\.mount"; then
          echo "WARNING: Failed mount points detected!"
          systemctl list-units --failed | grep "\.mount"
      fi

      # Check SMART status if available
      if command -v smartctl >/dev/null 2>&1; then
          echo
          echo "=== SMART Status ==="
          for disk in $(lsblk -d -n -o NAME | grep -E "^sd|^nvme"); do
              echo "Checking /dev/$disk..."
              smartctl -H /dev/$disk 2>/dev/null | grep -E "SMART|result"
          done
      fi
    dest: /usr/local/bin/check-storage-health
    mode: '0755'
  become: yes
  when: health_check_storage

- name: Create graphics health check script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Check for graphics driver errors

      echo "=== Graphics Driver Health Check ==="

      # Check for GPU errors in journal
      if journalctl -b 0 | grep -qE "(drm|i915|nvidia|amdgpu).*error"; then
          echo "WARNING: Graphics driver errors detected!"
          journalctl -b 0 | grep -E "(drm|i915|nvidia|amdgpu).*error" | tail -10
      fi

      # Check loaded graphics modules
      echo
      echo "Loaded graphics drivers:"
      lsmod | grep -E "i915|nvidia|amdgpu|nouveau|radeon" || echo "No graphics drivers loaded!"

      # Check for display connection issues
      if journalctl -b 0 | grep -q "failed to retrieve link info"; then
          echo
          echo "WARNING: Display connection issues detected!"
          journalctl -b 0 | grep "failed to retrieve link info"
      fi
    dest: /usr/local/bin/check-graphics-health
    mode: '0755'
  become: yes
  when: health_check_graphics

- name: Create service failure check script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Check for failed services

      echo "=== Service Health Check ==="

      # Check for failed services
      failed_services=$(systemctl --failed --no-pager --no-legend | wc -l)
      if [ "$failed_services" -gt 0 ]; then
          echo "WARNING: $failed_services failed services detected!"
          systemctl --failed
          echo
          echo "To investigate a failed service, run:"
          echo "  systemctl status <service-name>"
          echo "  journalctl -u <service-name>"
      else
          echo "All services are running successfully."
      fi

      # Check for services that are constantly restarting
      echo
      echo "=== Checking for restarting services ==="
      for service in $(systemctl list-units --type=service --state=active --no-pager --no-legend | awk '{print $1}'); do
          restarts=$(systemctl show -p NRestarts --value "$service")
          if [ "$restarts" -gt 5 ]; then
              echo "WARNING: $service has restarted $restarts times"
          fi
      done
    dest: /usr/local/bin/check-service-health
    mode: '0755'
  become: yes
  when: health_check_services

- name: Install smartmontools for disk health monitoring
  ansible.builtin.apt:
    name: smartmontools
    state: present
  become: yes
  when: health_check_storage

- name: Create notification script for boot errors
  ansible.builtin.template:
    src: notify-boot-errors.sh.j2
    dest: /usr/local/bin/notify-boot-errors
    mode: '0755'
  become: yes
  when: send_boot_alerts
